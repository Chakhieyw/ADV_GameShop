import { Component, signal, OnInit, computed } from '@angular/core';
import { AuthService } from '../../../core/services/auth';
import { Router } from '@angular/router';
import { RouterLink } from '@angular/router';
import { Firestore, collection, getDocs, onSnapshot, query, where } from '@angular/fire/firestore';
import { CommonModule ,} from '@angular/common';

import { FormsModule } from '@angular/forms';
import { GameService } from '../../../core/services/game_service';
import { HistoryService } from '../../../core/services/history';

@Component({
  selector: 'app-user-home',
  standalone: true,
  imports: [RouterLink, CommonModule, FormsModule],
  templateUrl: './user-home.html',
  styleUrls: ['./user-home.scss'],
})
export class UserHome implements OnInit {
  user = signal<any>(null); // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  topGames = signal<any[]>([]);
  allGames = signal<any[]>([]); // ‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  totalGames = signal<string>('0.00'); // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  fpsGames = signal<any[]>([]); // ‡πÄ‡∏Å‡∏°‡πÅ‡∏ô‡∏ß FPS
  rpgGames = signal<any[]>([]); // ‡πÄ‡∏Å‡∏°‡πÅ‡∏ô‡∏ß RPG
  mobaGames = signal<any[]>([]); // ‡πÄ‡∏Å‡∏°‡πÅ‡∏ô‡∏ß MOBA
  racingGames = signal<any[]>([]); // ‡πÄ‡∏Å‡∏°‡πÅ‡∏ô‡∏ß Racing
  dungeonGames = signal<any[]>([]); // ‡πÄ‡∏Å‡∏°‡πÅ‡∏ô‡∏ß Dungeon
  cartItems = signal<any[]>([]); // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
  showCart = signal(false);
  discounts = signal<any[]>([]); // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏à‡∏≤‡∏Å Firestore
  ownedGames = signal<any[]>([]); // ‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡πâ‡∏ß
  selectedDiscount = signal<any | null>(null); // ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ
  categories = ['Moba','Racing','RPG','FPS','Dungeon']; // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏Å‡∏°
  searchResults = signal<any[]>([]);
  searchText: string = '';      // ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°
  selectedType: string = '';    // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏Å‡∏°
  isSearching = signal(false);
  
  

  constructor(
    private auth: AuthService,
    private router: Router,
    private firestore: Firestore,
    private gameService: GameService,
    private historyService: HistoryService,
  ) {
    if (!this.auth.isLoggedIn()) {
      this.router.navigate(['/login']);
    }
  }


  
  // Getter ‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  showCartDialog() {
    return this.showCart();
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î dialog
  openCartDialog() {
    this.showCart.set(true);
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î dialog
  closeCartDialog() {
    this.showCart.set(false);
  }

ngOnInit() {
  this.init();

  // ‡πÇ‡∏´‡∏•‡∏î cart ‡∏à‡∏≤‡∏Å localStorage
  const cartStr = localStorage.getItem('cartItems') || '[]';
  const cart: any[] = JSON.parse(cartStr);
  this.cartItems.set(cart);
  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î dialog ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÑ‡∏´‡∏°
  const openDialog = localStorage.getItem('openCartDialog');
  if (openDialog === 'true') {
    this.showCart.set(true);
    localStorage.removeItem('openCartDialog'); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå flag
  }
}




async init() {
  await this.loadUser();      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ user ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
  await this.loadOwnedGames(); // ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ user() ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß
  await this.loadGames();
  await this.loadDiscounts();
  
}



// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Search
performSearch() {
  
  console.log(this.searchText);
  console.log(this.selectedType);
  
  if (this.searchText == '' && this.selectedType == '') {
    this.clearSearch();
    return;
  }
  let results = this.allGames();

  if (this.searchText.trim()) {
    const text = this.searchText.toLowerCase();
    results = results.filter(g => g.name && g.name.toLowerCase().includes(text));
  }

  if (this.selectedType) {
    results = results.filter(g => g.type && g.type === this.selectedType);
  }

  this.searchResults.set(results);
  console.log(results);
  console.log('searching good');
  this.isSearching.set(true);
}

// ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
clearSearch() {
  this.searchText = '';
  this.selectedType = '';
  this.searchResults.set([]);
  this.isSearching.set(false);
}

// ‡πÇ‡∏´‡∏•‡∏î discounts
loadDiscounts() {
  const q = query(
    collection(this.firestore, 'discounts'),
    where('status', '==', 'active')
  );

  onSnapshot(q, (snapshot) => {
    const list: any[] = [];
    snapshot.forEach((snap) => list.push({ id: snap.id, ...snap.data() }));

    // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î
    const available = list.filter(d => d.limit > 0);
    this.discounts.set(available);

    console.log('üì¢ Discounts updated:', available);
  }, (err) => {
    console.error('Failed to listen discounts', err);
  });
}

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å Firestore
  async loadUser() {
    try {
      const sessionUser = this.auth.getUserFromSession();
      const latestUser = await this.auth.fetchUser(sessionUser.uid);
      this.user.set(latestUser);
    } catch (err) {
      console.error('Failed to load user', err);
      this.router.navigate(['/login']);
    }
  }

  async loadOwnedGames() {
    const userData = this.user();
    if (!userData) return;

    try {
      const querySnapshot = await getDocs(collection(this.firestore, 'mygames'));
      const list: any[] = [];
      querySnapshot.forEach(docSnap => {
        const data = docSnap.data();
        if (data['userId'] === userData.uid) list.push(data);
      });
      this.ownedGames.set(list);
      console.log('Owned games:', list);
    } catch (err) {
      console.error('Failed to load owned games', err);
    }
  }


  // ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  async loadGames() {
    try {
      const querySnapshot = await getDocs(collection(this.firestore, 'games'));
      const list: any[] = [];
      querySnapshot.forEach((snap) => list.push({ id: snap.id, ...snap.data() }));
      this.allGames.set(list);
      this.fpsGames.set(list.filter(g => g.type === 'FPS'));
      this.rpgGames.set(list.filter(g => g.type === 'RPG'));
      this.mobaGames.set(list.filter(g => g.type === 'Moba'));
      this.racingGames.set(list.filter(g => g.type === 'Racing'));
      this.dungeonGames.set(list.filter(g => g.type === 'Dungeon'));

       // ‚úÖ Top 5 ‡πÄ‡∏Å‡∏°‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ

    const top = list
      .sort((a, b) => (b.sold || 0) - (a.sold || 0))
      .slice(0, 5);

    this.topGames.set(top); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á signal
    console.log('5 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÄ‡∏Å‡∏°‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ:', top);

      console.log('Games loaded:', list);
    } catch (err) {
      console.error('Failed to load games', err);
    }
  }
  
 isGameOwned(gameId: string) {
  return this.ownedGames().some(g => g.gameId === gameId);
}


  // ‡∏î‡∏∂‡∏á‡πÄ‡∏Å‡∏°‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
 getGamesByCategory(category: string) {
  const games = this.allGames() || [];
  return games.filter(game => game.category === category);
}

// toggle ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
toggleCart(game: any) {
  const current = this.cartItems();
  const exists = current.find(g => g.id === game.id);

  let newCart;
  if (exists) {
    newCart = current.filter(g => g.id !== game.id);
  } else {
    newCart = [...current, game];
  }
  this.cartItems.set(newCart);
  // ‡πÄ‡∏ã‡∏ü‡∏•‡∏á localStorage
  localStorage.setItem('cartItems', JSON.stringify(newCart));
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
isInCart(game: any) {
  return this.cartItems().some(g => g.id === game.id);
}
// ‡∏•‡∏ö‡πÄ‡∏Å‡∏°‡∏à‡∏≤‡∏Å cart (dialog ‡πÉ‡∏ä‡πâ trash)
removeFromCart(game: any) {
  const newCart = this.cartItems().filter(g => g.id !== game.id);
  this.cartItems.set(newCart);
  localStorage.setItem('cartItems', JSON.stringify(newCart));
}
// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
totalCartPrice = computed(() => 
  this.cartItems().reduce((sum, g) => sum + g.price, 0)
);
// ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
cartCount() {
  return this.cartItems().length;
}

// ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
async checkout() {
  const userData = this.user();
  if (!userData) return;

  const total = this.finalPrice();

  if (this.cartItems().length <= 0 ) {
    alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏°‡∏Å‡πà‡∏≠‡∏ô');
    return;
  }
  // ‡πÄ‡∏ä‡πá‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÑ‡∏´‡∏°
  if (userData.money < total) {
    alert('‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏°‡πà‡∏û‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô');
    console.log('Checkout failed: ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠', {
      userId: userData.uid,
      userMoney: userData.money,
      required: total
    });
    return;
  }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  if (this.selectedDiscount()) {
    const usedBefore = await this.hasUserUsedCoupon(userData.uid, this.selectedDiscount().code);
    console.log(this.selectedDiscount().code);  
    if (usedBefore) {
      alert(`‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á ${this.selectedDiscount().code} ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‚ùå`);
      return;
    }
  }


  // Confirm dialog
  const confirmMsg = this.selectedDiscount()
    ? `!‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ ${this.selectedDiscount().code} / 1 ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô\n‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏°‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? `
    : '‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?';

  if (!confirm(confirmMsg)) {
    console.log('Checkout cancelled by user');
    return;
  }

  try {
    // 1Ô∏è‚É£ ‡∏ï‡∏±‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    console.log('Updating user money...', {
      userId: userData.uid,
      oldMoney: userData.money,
      newMoney: userData.money - total
    });
    await this.gameService.updateUserMoney(userData.uid, userData.money - total);
    console.log('User money updated successfully');

    for (let game of this.cartItems()) {
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á ownedGames ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      this.ownedGames.set([...this.ownedGames(), {
        userId: userData.uid,
        gameId: game.id,  
        name: game.name,
        imageUrl: game.imageUrl,
        price: game.price,
        purchasedAt: new Date()
      }]);
    }


    // 2Ô∏è‚É£ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
    for (let game of this.cartItems()) {
      console.log('Adding history for game:', game);
      await this.historyService.addHistory(userData.uid, {
        type: 'purchase',
        gameId: game.id,
        gameName: game.name,
        amount: game.price,
        discountUsed: this.selectedDiscount()?.code || null
      });
      console.log('History added for game:', game.id);

      console.log('Adding game to mygames:', game);
      await this.gameService.addMyGame(userData.uid, game);
      console.log('Game added to mygames:', game.id);

      await this.gameService.increaseSoldCount(game.id);
      console.log('update game sold success');
    }
    
    // 3Ô∏è‚É£ ‡∏•‡∏î‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á
    if (this.selectedDiscount()) {
      console.log('Decreasing coupon count:', this.selectedDiscount().id);
      await this.gameService.decreaseCouponCount(this.selectedDiscount().id);
      console.log('Coupon count decreased:', this.selectedDiscount().id);
    }

    // 4Ô∏è‚É£ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï cart ‡πÅ‡∏•‡∏∞ discount
    this.cartItems.set([]);
    localStorage.setItem('cartItems', JSON.stringify(this.cartItems()));
    this.selectedDiscount.set(null);
    this.closeCartDialog();
    console.log('Cart and discount reset');

    // 5Ô∏è‚É£ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    await this.loadUser();
    console.log('User data reloaded');

    alert('‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‚úÖ');

  } catch (err) {
    console.error('Checkout failed at some step:', err);
    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏°');
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
onDiscountChange(selectedId: string) {
  const discount = this.discounts().find(d => d.id === selectedId);
  this.selectedDiscount.set(discount || null);
}

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
discountAmount = computed(() => {
  const discount = this.selectedDiscount();
  const total = this.cartItems().reduce((sum, g) => sum + g.price, 0);
  return discount ? (discount.percent / 100) * total : 0;
});

// ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
finalPrice = computed(() => this.cartItems().reduce((sum, g) => sum + g.price, 0) - this.discountAmount());

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  async hasUserUsedCoupon(userId: string, couponCode: string): Promise<boolean> {
    try {
      // ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏µ‡πâ
      const histories = await this.historyService.getUserHistory(userId);
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ history ‡πÑ‡∏´‡∏ô‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏´‡∏°
      return histories.some((h: any) => h.usedcupon === couponCode);
    } catch (err) {
      console.error('Failed to check coupon usage', err);
      return false;
    }
  }


  async onLogout() {
    try {
      await this.auth.logout();
      this.router.navigate(['/login']);
    } catch (err) {
      console.error('Logout failed', err);
    }
  }
}
