import { Injectable, signal } from '@angular/core';
import {
  Auth,
  createUserWithEmailAndPassword,
  onAuthStateChanged,
  signInWithEmailAndPassword,
  signOut,
  updateEmail,
  user,
  User,
} from '@angular/fire/auth';
import {
  Firestore,
  doc,
  setDoc,
  getDoc,
  updateDoc,
  increment,
  collection,
  addDoc,
  serverTimestamp,
  runTransaction
} from '@angular/fire/firestore';
import {
  Storage,
  ref,
  uploadBytes,
  getDownloadURL,
} from '@angular/fire/storage';
import { Router } from '@angular/router';

@Injectable({ providedIn: 'root' })
export class AuthService {
  // ‚úÖ ‡πÉ‡∏ä‡πâ signal ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  currentUser = signal<any | null>(null);
  private authChecked = signal(false); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° signal ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ auth state ‡πÅ‡∏•‡πâ‡∏ß

  constructor(
    private auth: Auth,
    private firestore: Firestore,
    private router: Router
  ) {
    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Firebase
    onAuthStateChanged(this.auth, async (firebaseUser: User | null) => {
      if (firebaseUser) {
        try {
          const snap = await getDoc(
            doc(this.firestore, 'users', firebaseUser.uid)
          );
          if (snap.exists()) {
            const userData = { uid: firebaseUser.uid, ...snap.data() };
            this.currentUser.set(userData);
            // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô localStorage
            localStorage.setItem('user', JSON.stringify(userData));
            console.log('Auth state changed: User logged in', userData);
          }
        } catch (error) {
          console.error('Error fetching user data:', error);
          this.currentUser.set(null);
          localStorage.removeItem('user');
        }
      } else {
        this.currentUser.set(null);
        localStorage.removeItem('user');
      }
      this.authChecked.set(true);
    });
  }

  // ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ Firebase Auth ‡πÇ‡∏´‡∏•‡∏î session ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô user ‡πÉ‡∏´‡πâ component
async waitForSessionUser(): Promise<any | null> {
  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÉ‡∏ô localStorage ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏•‡∏¢
  const cached = this.getUserFromSession();
  if (cached) return cached;

  // ‡∏ñ‡πâ‡∏≤ Firebase ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ login ‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏£‡∏≠
  if (!this.authChecked()) {
    await new Promise<void>((resolve) => {
      const check = setInterval(() => {
        if (this.authChecked()) {
          clearInterval(check);
          resolve();
        }
      }, 100);
    });
  }

  // ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ Firebase ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‚Äî ‡∏î‡∏π currentUser()
  const current = this.currentUser();
  if (current) return current;

  // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ currentUser ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÉ‡∏ô localStorage
  return this.getUserFromSession();
}


  // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô sessionStorage
  getUserFromSession() {
    const user = localStorage.getItem('user');
    return user ? JSON.parse(user) : null;
  }

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏à‡∏≤‡∏Å session
  isLoggedIn(): boolean {
    return !!localStorage.getItem('user');
  }

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏≠‡πÉ‡∏´‡πâ auth state ‡∏û‡∏£‡πâ‡∏≠‡∏°
  async waitForAuthCheck(): Promise<boolean> {
    if (!this.authChecked()) {
      return new Promise((resolve) => {
        const checkInterval = setInterval(() => {
          if (this.authChecked()) {
            clearInterval(checkInterval);
            resolve(this.isLoggedIn());
          }
        }, 100);
      });
    }
    return this.isLoggedIn();
  }
  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  getCurrentUser() {
    return this.currentUser();
  }

  async uploadToCloudinary(file: File): Promise<string> {
    const cloudName = 'dwkwzzm15'; // ‚Üê ‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    const uploadPreset = 'gameshop'; // ‚Üê preset ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ

    const formData = new FormData();
    formData.append('file', file);
    formData.append('upload_preset', uploadPreset); // ‚úÖ ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å

    const res = await fetch(
      `https://api.cloudinary.com/v1_1/${cloudName}/image/upload`,
      {
        method: 'POST',
        body: formData,
      }
    );

    const data = await res.json();

    if (data.secure_url) {
      console.log('Uploaded to Cloudinary:', data.secure_url);
      return data.secure_url;
    } else {
      throw new Error('‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚ùå ' + JSON.stringify(data));
    }
  }

  // ‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å + ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ + ‡∏Ñ‡∏∑‡∏ô userCredential
  async register(
    username: string,
    email: string,
    password: string,
    file?: File
  ) {
    const cred = await createUserWithEmailAndPassword(
      this.auth,
      email,
      password
    );
    const uid = cred.user.uid;

    let profileUrl = '';
    // ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (file) {
      profileUrl = await this.uploadToCloudinary(file);
    } else {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö üòä');
    }

    // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ userCredential + ‡πÅ‡∏ô‡∏ö avatarUrl ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ component ‡πÉ‡∏ä‡πâ‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
    return { user: cred.user, profileUrl };
  }

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô Firestore
  async saveUserToDB(userData: {
    uid: string;
    username: string;
    email: string;
    role?: string;
    profileUrl?: string | null;
    money?: number;
  }) {
    const userRef = doc(this.firestore, 'users', userData.uid);
    await setDoc(userRef, {
      uid: userData.uid,
      username: userData.username,
      email: userData.email,
      profileUrl: userData.profileUrl || '',
      role: userData.role || 'user',
      createdAt: new Date(),
      money: userData.money || 0,
    });

    await signOut(this.auth);
  }

  async login(email: string, password: string) {
    const cred = await signInWithEmailAndPassword(this.auth, email, password);
    const uid = cred.user.uid;

    let snap = await getDoc(doc(this.firestore, 'users', uid));
    let role = 'user';

    if (!snap.exists()) {
      const adminDocRef = doc(this.firestore, 'admin', 'admin');
      const adminSnap = await getDoc(adminDocRef);

      if (adminSnap.exists()) {
        snap = adminSnap;
        role = 'admin';
      } else {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏ô Firestore ‚ùå');
      }
    }

    const data = snap.data() as any;

    const userData = {
      uid,
      username: data.username || cred.user.displayName || '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà',
      email: data.email || cred.user.email,
      profileUrl: data.profileUrl || null,
      role: data.role || role,
    };

    // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô localStorage
    localStorage.setItem('user', JSON.stringify(userData));

    if (userData.role === 'admin') {
      alert(`‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö ${userData.username} üßë‚Äçüíª`);
      this.router.navigate(['/admin/home']);
    } else {
      alert(`‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ${userData.username} üéÆ`);
      this.router.navigate(['/user/home']);
    }

    return userData;
  }
  getRole(): string | null {
    const user = this.currentUser();
    return user ? user.role : null;
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏à‡∏≤‡∏Å Firestore (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
  async fetchUser(uid: string) {
    const docRef = doc(this.firestore, 'users', uid);
    const snap = await getDoc(docRef);
    if (!snap.exists()) throw new Error('User not found');
    return snap.data();
  }

  


  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Firestore
async updateUser(uid: string, data: any, incrementMoney?: number) {
  try {
    const userRef = doc(this.firestore, 'users', uid);

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏î‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô
    if (incrementMoney !== undefined) {
      await updateDoc(userRef, {
        ...data,
        money: increment(incrementMoney),  // <-- ‡πÉ‡∏ä‡πâ increment() ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏à‡∏≤‡∏Å race condition
      });
    } else {
      await updateDoc(userRef, data);
    }

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï session ‡πÉ‡∏ô localStorage/sessionStorage
    const user = this.getUserFromSession();
    if (user) {
      const updated = {
        ...user,
        ...data,
        ...(incrementMoney !== undefined
          ? { money: (user.money || 0) + incrementMoney }
          : {}),
      };
      sessionStorage.setItem('user', JSON.stringify(updated));
    }

    console.log('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ');
  } catch (error) {
    console.error('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‚ùå', error);
    throw error;
  }
}
  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Firestore + sessionStorage
  async updateProfilePicture(file: File): Promise<string> {
    const user = this.getUserFromSession();
    if (!user || !user.uid)
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô sessionStorage');

    try {
      // 1Ô∏è‚É£ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡∏∂‡πâ‡∏ô Cloudinary
      const newUrl = await this.uploadToCloudinary(file);

      // 2Ô∏è‚É£ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô Firestore
      const userRef = doc(this.firestore, 'users', user.uid);
      await updateDoc(userRef, { profileUrl: newUrl });

      // 3Ô∏è‚É£ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï localStorage
      const updatedUser = { ...user, profileUrl: newUrl };
      localStorage.setItem('user', JSON.stringify(updatedUser));

      console.log('‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      return newUrl;
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', error);
      throw error;
    }
  }


  async addTopupHistory(userId: string, amount: number, note: string = '‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à') {
  try {
    const historyRef = collection(this.firestore, 'history');

    await addDoc(historyRef, {
      userId,           // uid ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      type: 'topup',    // ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
      amount,           // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏ß‡∏Å)
      note,             // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
      timestamp: serverTimestamp(), // ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    });

    console.log(`‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô ${amount} ‡∏ö‡∏≤‡∏ó ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ`);
  } catch (error) {
    console.error('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‚ùå', error);
    throw error;
  }
}


  async logout() {
    try {
      await signOut(this.auth);
      console.log('‚úÖ Firebase logout successful');
    } catch (e) {
      console.warn('Firebase logout failed', e);
    } finally {
      this.currentUser.set(null);
      localStorage.removeItem('user'); // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏Ñ‡πà‡∏ï‡∏≠‡∏ô logout
      console.log('‚úÖ Session cleared');
      this.router.navigate(['/login']);
    }
  }
}
