import { Injectable } from '@angular/core';
import { Firestore, addDoc, collection, doc, getDoc, getDocs, increment, limit, serverTimestamp, updateDoc } from '@angular/fire/firestore';

@Injectable({ providedIn: 'root' })
export class GameService {
  discountService: any;
  constructor(private firestore: Firestore) {}

  async updateUserMoney(userId: string, newMoney: number) {
    const userRef = doc(this.firestore, 'users', userId);
    await updateDoc(userRef, { money: newMoney });
  }

  async addMyGame(userId: string, game: any) {
    const mygameRef = collection(this.firestore, 'mygames');
    await addDoc(mygameRef, {
      userId,
      gameId: game.id,
      name: game.name,
      imageUrl: game.imageUrl,
      price: game.price,
      purchasedAt: serverTimestamp(),
    });
  }

  //‡∏•‡∏ö‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ
  async decreaseCouponCount(discountId: string) {
  const ref = doc(this.firestore, 'discounts', discountId);
  const snapshot = await getDoc(ref);

  if (snapshot.exists()) {
    const data = snapshot.data();
    const currentLimit = data['limit'] || 1;
    const newLimit = Math.max(currentLimit - 1, 0);

    // ‡∏ñ‡πâ‡∏≤ newLimit == 0 ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô status ‡πÄ‡∏õ‡πá‡∏ô "inactive"
    const newStatus = newLimit === 0 ? 'inactive' : data['status'] || 'active';

    await updateDoc(ref, {
      limit: newLimit,
      status: newStatus
    });
  }
}


//‡∏ô‡∏±‡∏ö‡πÄ‡∏Å‡∏°‡∏ß‡πà‡∏≤‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà
async increaseSoldCount(gameId: string) {
    try {
      const gameRef = doc(this.firestore, 'games', gameId);
      await updateDoc(gameRef, { sold: increment(1) });
      console.log(`üìà ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏Å‡∏° ${gameId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    } catch (err) {
      console.error(`‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏Å‡∏° ${gameId} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, err);
      throw err;
    }
  }


}
